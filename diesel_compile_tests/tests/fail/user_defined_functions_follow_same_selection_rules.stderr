error[E0271]: type mismatch resolving `<foo<Bound<Integer, i32>> as Expression>::SqlType == Text`
  --> tests/fail/user_defined_functions_follow_same_selection_rules.rs:35:38
   |
35 |     let _ = users::table.filter(name.eq(foo(1)));
   |                                      ^^ expected `Integer`, found `Text`
   |
   = note: required for `foo::foo<diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>` to implement `AsExpression<diesel::sql_types::Text>`

error[E0271]: type mismatch resolving `<table as AppearsInFromClause<table>>::Count == Once`
  --> tests/fail/user_defined_functions_follow_same_selection_rules.rs:38:23
   |
38 |         .load::<User>(&mut conn);
   |          ----         ^^^^^^^^^ expected `Once`, found `Never`
   |          |
   |          required by a bound introduced by this call
   |
note: required for `posts::columns::title` to implement `AppearsInQuery<users::table>`
  --> tests/fail/user_defined_functions_follow_same_selection_rules.rs:16:9
   |
16 |         title -> VarChar,
   |         ^^^^^
   = note: 3 redundant requirements hidden
   = note: required for `diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<users::columns::name, bar::bar<posts::columns::title>>>` to implement `AppearsInQuery<users::table>`
   = note: required for `WhereClause<Grouped<Eq<name, bar<title>>>>` to implement `diesel::query_builder::where_clause::ValidWhereClause<FromClause<users::table>>`
   = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<...>>` to implement `Query`
   = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<...>>` to implement `LoadQuery<'_, _, User>`
note: required by a bound in `diesel::RunQueryDsl::load`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
   |        ---- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0277]: the trait bound `users::table: TableNotEqual<posts::table>` is not satisfied
  --> tests/fail/user_defined_functions_follow_same_selection_rules.rs:38:23
   |
38 |         .load::<User>(&mut conn);
   |          ----         ^^^^^^^^^ the trait `TableNotEqual<posts::table>` is not implemented for `users::table`
   |          |
   |          required by a bound introduced by this call
   |
   = help: the following other types implement trait `TableNotEqual<T>`:
             <Only<pg::metadata_lookup::pg_namespace::table> as TableNotEqual<pg::metadata_lookup::pg_type::table>>
             <Only<pg::metadata_lookup::pg_type::table> as TableNotEqual<pg::metadata_lookup::pg_namespace::table>>
             <pg::metadata_lookup::pg_namespace::table as TableNotEqual<Only<pg::metadata_lookup::pg_type::table>>>
             <pg::metadata_lookup::pg_namespace::table as TableNotEqual<pg::metadata_lookup::pg_type::table>>
             <pg::metadata_lookup::pg_type::table as TableNotEqual<Only<pg::metadata_lookup::pg_namespace::table>>>
             <pg::metadata_lookup::pg_type::table as TableNotEqual<pg::metadata_lookup::pg_namespace::table>>
   = note: required for `users::table` to implement `AppearsInFromClause<posts::table>`
note: required for `posts::columns::title` to implement `AppearsInQuery<users::table>`
  --> tests/fail/user_defined_functions_follow_same_selection_rules.rs:16:9
   |
16 |         title -> VarChar,
   |         ^^^^^
   = note: 3 redundant requirements hidden
   = note: required for `diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<users::columns::name, bar::bar<posts::columns::title>>>` to implement `AppearsInQuery<users::table>`
   = note: required for `WhereClause<Grouped<Eq<name, bar<title>>>>` to implement `diesel::query_builder::where_clause::ValidWhereClause<FromClause<users::table>>`
   = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<...>>` to implement `Query`
   = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<...>>` to implement `LoadQuery<'_, _, User>`
note: required by a bound in `diesel::RunQueryDsl::load`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
   |        ---- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`
