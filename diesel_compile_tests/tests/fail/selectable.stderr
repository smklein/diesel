error[E0412]: cannot find type `titel` in module `posts`
  --> tests/fail/selectable.rs:54:5
   |
16 |         title -> Text,
   |         ----- similarly named struct `title` defined here
...
54 |     titel: String
   |     ^^^^^ help: a struct with a similar name exists: `title`

error[E0425]: cannot find value `titel` in module `posts`
  --> tests/fail/selectable.rs:54:5
   |
16 |         title -> Text,
   |         ----- similarly named unit struct `title` defined here
...
54 |     titel: String
   |     ^^^^^ help: a unit struct with a similar name exists: `title`

error[E0433]: failed to resolve: use of undeclared crate or module `post`
  --> tests/fail/selectable.rs:59:23
   |
59 | #[diesel(table_name = post)]
   |                       ^^^^
   |                       |
   |                       use of undeclared crate or module `post`
   |                       help: a struct with a similar name exists: `Post`

error[E0271]: type mismatch resolving `<table as AppearsInFromClause<table>>::Count == Never`
   --> tests/fail/selectable.rs:150:10
    |
150 |         .select(UserWithEmbeddedPost::as_select())
    |          ^^^^^^ expected `Once`, found `Never`
    |
note: required for `posts::columns::id` to implement `SelectableExpression<query_source::joins::Join<users::table, posts::table, LeftOuter>>`
   --> tests/fail/selectable.rs:15:9
    |
15  |         id -> Integer,
    |         ^^
    = note: 4 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>`
    = note: required for `SelectStatement<FromClause<JoinOn<Join<table, table, LeftOuter>, Grouped<Eq<Nullable<user_id>, ...>>>>>` to implement `SelectDsl<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>`

error[E0277]: Cannot select `posts::columns::id` from `users::table`
   --> tests/fail/selectable.rs:150:10
    |
150 |         .select(UserWithEmbeddedPost::as_select())
    |          ^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::id`
    |
    = note: `posts::columns::id` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::id as SelectableExpression<posts::table>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
              <posts::columns::id as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::id as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::id as SelectableExpression<Only<posts::table>>>
note: required for `posts::columns::id` to implement `SelectableExpression<query_source::joins::Join<users::table, posts::table, LeftOuter>>`
   --> tests/fail/selectable.rs:15:9
    |
15  |         id -> Integer,
    |         ^^
    = note: 4 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>`
    = note: required for `SelectStatement<FromClause<JoinOn<Join<table, table, LeftOuter>, Grouped<Eq<Nullable<user_id>, ...>>>>>` to implement `SelectDsl<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>`

error[E0277]: Cannot select `posts::columns::title` from `users::table`
   --> tests/fail/selectable.rs:150:10
    |
150 |         .select(UserWithEmbeddedPost::as_select())
    |          ^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::title`
    |
    = note: `posts::columns::title` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::title as SelectableExpression<posts::table>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
              <posts::columns::title as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::title as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::title as SelectableExpression<Only<posts::table>>>
note: required for `posts::columns::title` to implement `SelectableExpression<query_source::joins::Join<users::table, posts::table, LeftOuter>>`
   --> tests/fail/selectable.rs:16:9
    |
16  |         title -> Text,
    |         ^^^^^
    = note: 4 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>`
    = note: required for `SelectStatement<FromClause<JoinOn<Join<table, table, LeftOuter>, Grouped<Eq<Nullable<user_id>, ...>>>>>` to implement `SelectDsl<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>`

error[E0271]: type mismatch resolving `<table as AppearsInFromClause<table>>::Count == Never`
   --> tests/fail/selectable.rs:151:15
    |
151 |         .load(&mut conn)
    |          ---- ^^^^^^^^^ expected `Never`, found `Once`
    |          |
    |          required by a bound introduced by this call
    |
note: required for `posts::columns::id` to implement `SelectableExpression<query_source::joins::Join<users::table, posts::table, LeftOuter>>`
   --> tests/fail/selectable.rs:15:9
    |
15  |         id -> Integer,
    |         ^^
    = note: 4 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>`
    = note: required for `diesel::query_builder::select_clause::SelectClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>` to implement `diesel::query_builder::select_clause::SelectClauseExpression<FromClause<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>>`
    = note: required for `SelectStatement<FromClause<JoinOn<Join<table, table, LeftOuter>, Grouped<Eq<Nullable<user_id>, ...>>>>, ...>` to implement `Query`
    = note: required for `SelectStatement<FromClause<JoinOn<Join<table, table, LeftOuter>, Grouped<Eq<Nullable<user_id>, ...>>>>, ...>` to implement `LoadQuery<'_, _, UserWithEmbeddedPost>`
note: required by a bound in `diesel::RunQueryDsl::load`
   --> $DIESEL/src/query_dsl/mod.rs
    |
    |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
    |        ---- required by a bound in this associated function
    |     where
    |         Self: LoadQuery<'query, Conn, U>,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0277]: Cannot select `posts::columns::id` from `users::table`
   --> tests/fail/selectable.rs:151:15
    |
151 |         .load(&mut conn)
    |          ---- ^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::id`
    |          |
    |          required by a bound introduced by this call
    |
    = note: `posts::columns::id` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::id as SelectableExpression<posts::table>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
              <posts::columns::id as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::id as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::id as SelectableExpression<Only<posts::table>>>
note: required for `posts::columns::id` to implement `SelectableExpression<query_source::joins::Join<users::table, posts::table, LeftOuter>>`
   --> tests/fail/selectable.rs:15:9
    |
15  |         id -> Integer,
    |         ^^
    = note: 4 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>`
    = note: required for `diesel::query_builder::select_clause::SelectClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>` to implement `diesel::query_builder::select_clause::SelectClauseExpression<FromClause<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>>`
    = note: required for `SelectStatement<FromClause<JoinOn<Join<table, table, LeftOuter>, Grouped<Eq<Nullable<user_id>, ...>>>>, ...>` to implement `Query`
    = note: required for `SelectStatement<FromClause<JoinOn<Join<table, table, LeftOuter>, Grouped<Eq<Nullable<user_id>, ...>>>>, ...>` to implement `LoadQuery<'_, _, UserWithEmbeddedPost>`
note: required by a bound in `diesel::RunQueryDsl::load`
   --> $DIESEL/src/query_dsl/mod.rs
    |
    |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
    |        ---- required by a bound in this associated function
    |     where
    |         Self: LoadQuery<'query, Conn, U>,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0277]: Cannot select `posts::columns::title` from `users::table`
   --> tests/fail/selectable.rs:151:15
    |
151 |         .load(&mut conn)
    |          ---- ^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::title`
    |          |
    |          required by a bound introduced by this call
    |
    = note: `posts::columns::title` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::title as SelectableExpression<posts::table>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
              <posts::columns::title as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::title as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::title as SelectableExpression<Only<posts::table>>>
note: required for `posts::columns::title` to implement `SelectableExpression<query_source::joins::Join<users::table, posts::table, LeftOuter>>`
   --> tests/fail/selectable.rs:16:9
    |
16  |         title -> Text,
    |         ^^^^^
    = note: 4 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>`
    = note: required for `diesel::query_builder::select_clause::SelectClause<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>` to implement `diesel::query_builder::select_clause::SelectClauseExpression<FromClause<JoinOn<query_source::joins::Join<users::table, posts::table, LeftOuter>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<NullableExpression<posts::columns::user_id>, NullableExpression<users::columns::id>>>>>>`
    = note: required for `SelectStatement<FromClause<JoinOn<Join<table, table, LeftOuter>, Grouped<Eq<Nullable<user_id>, ...>>>>, ...>` to implement `Query`
    = note: required for `SelectStatement<FromClause<JoinOn<Join<table, table, LeftOuter>, Grouped<Eq<Nullable<user_id>, ...>>>>, ...>` to implement `LoadQuery<'_, _, UserWithEmbeddedPost>`
note: required by a bound in `diesel::RunQueryDsl::load`
   --> $DIESEL/src/query_dsl/mod.rs
    |
    |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
    |        ---- required by a bound in this associated function
    |     where
    |         Self: LoadQuery<'query, Conn, U>,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0277]: the trait bound `posts::columns::id: IsContainedInGroupBy<users::columns::id>` is not satisfied
   --> tests/fail/selectable.rs:158:10
    |
158 |         .select(UserWithEmbeddedPost::as_select())
    |          ^^^^^^ the trait `IsContainedInGroupBy<users::columns::id>` is not implemented for `posts::columns::id`
    |
    = help: the following other types implement trait `IsContainedInGroupBy<T>`:
              <posts::columns::id as IsContainedInGroupBy<posts::columns::user_id>>
              <posts::columns::id as IsContainedInGroupBy<posts::columns::title>>
              <posts::columns::id as IsContainedInGroupBy<posts::columns::id>>
note: required for `users::columns::id` to implement `ValidGrouping<posts::columns::id>`
   --> tests/fail/selectable.rs:8:9
    |
8   |         id -> Integer,
    |         ^^
    = note: 2 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `ValidGrouping<posts::columns::id>`
    = note: required for `SelectStatement<FromClause<JoinOn<Join<table, table, Inner>, Grouped<...>>>, ..., ..., ..., ..., ..., ...>` to implement `SelectDsl<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>`

error[E0277]: the trait bound `posts::columns::id: IsContainedInGroupBy<users::columns::name>` is not satisfied
   --> tests/fail/selectable.rs:158:10
    |
158 |         .select(UserWithEmbeddedPost::as_select())
    |          ^^^^^^ the trait `IsContainedInGroupBy<users::columns::name>` is not implemented for `posts::columns::id`
    |
    = help: the following other types implement trait `IsContainedInGroupBy<T>`:
              <posts::columns::id as IsContainedInGroupBy<posts::columns::user_id>>
              <posts::columns::id as IsContainedInGroupBy<posts::columns::title>>
              <posts::columns::id as IsContainedInGroupBy<posts::columns::id>>
note: required for `users::columns::name` to implement `ValidGrouping<posts::columns::id>`
   --> tests/fail/selectable.rs:9:9
    |
9   |         name -> Text,
    |         ^^^^
    = note: 3 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `ValidGrouping<posts::columns::id>`
    = note: required for `SelectStatement<FromClause<JoinOn<Join<table, table, Inner>, Grouped<...>>>, ..., ..., ..., ..., ..., ...>` to implement `SelectDsl<diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>>`

error[E0277]: the trait bound `diesel::expression::is_aggregate::No: MixedAggregates<diesel::expression::is_aggregate::Yes>` is not satisfied
   --> tests/fail/selectable.rs:165:10
    |
165 |         .select(UserWithPostCount::as_select())
    |          ^^^^^^ the trait `MixedAggregates<diesel::expression::is_aggregate::Yes>` is not implemented for `diesel::expression::is_aggregate::No`
    |
    = help: the following other types implement trait `MixedAggregates<Other>`:
              <diesel::expression::is_aggregate::No as MixedAggregates<diesel::expression::is_aggregate::No>>
              <diesel::expression::is_aggregate::No as MixedAggregates<diesel::expression::is_aggregate::Never>>
    = note: required for `(users::columns::name, diesel::expression::count::count::count<diesel::sql_types::Integer, posts::columns::id>)` to implement `ValidGrouping<()>`
    = note: 2 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithPostCount, Pg>` to implement `ValidGrouping<()>`
    = note: required for `SelectStatement<FromClause<JoinOn<Join<table, table, Inner>, Grouped<Eq<Nullable<user_id>, Nullable<id>>>>>>` to implement `SelectDsl<diesel::expression::select_by::SelectBy<UserWithPostCount, Pg>>`

error[E0277]: Cannot select `posts::columns::id` from `users::table`
   --> tests/fail/selectable.rs:173:20
    |
173 |         .returning(UserWithEmbeddedPost::as_select())
    |          --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::id`
    |          |
    |          required by a bound introduced by this call
    |
    = note: `posts::columns::id` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::id as SelectableExpression<posts::table>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
              <posts::columns::id as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::id as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::id as SelectableExpression<Only<posts::table>>>
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `SelectableExpression<users::table>`
    = note: 2 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<users::table>`
    = note: required for `InsertStatement<table, ValuesClause<ColumnInsertValue<name, Bound<Text, &str>>, table>, Insert, ...>` to implement `Query`
note: required by a bound in `InsertStatement::<T, U, Op>::returning`
   --> $DIESEL/src/query_builder/insert_statement/mod.rs
    |
    |     pub fn returning<E>(self, returns: E) -> InsertStatement<T, U, Op, ReturningClause<E>>
    |            --------- required by a bound in this associated function
    |     where
    |         InsertStatement<T, U, Op, ReturningClause<E>>: Query,
    |                                                        ^^^^^ required by this bound in `InsertStatement::<T, U, Op>::returning`

error[E0277]: Cannot select `posts::columns::title` from `users::table`
   --> tests/fail/selectable.rs:173:20
    |
173 |         .returning(UserWithEmbeddedPost::as_select())
    |          --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::title`
    |          |
    |          required by a bound introduced by this call
    |
    = note: `posts::columns::title` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::title as SelectableExpression<posts::table>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
              <posts::columns::title as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::title as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::title as SelectableExpression<Only<posts::table>>>
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `SelectableExpression<users::table>`
    = note: 2 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<users::table>`
    = note: required for `InsertStatement<table, ValuesClause<ColumnInsertValue<name, Bound<Text, &str>>, table>, Insert, ...>` to implement `Query`
note: required by a bound in `InsertStatement::<T, U, Op>::returning`
   --> $DIESEL/src/query_builder/insert_statement/mod.rs
    |
    |     pub fn returning<E>(self, returns: E) -> InsertStatement<T, U, Op, ReturningClause<E>>
    |            --------- required by a bound in this associated function
    |     where
    |         InsertStatement<T, U, Op, ReturningClause<E>>: Query,
    |                                                        ^^^^^ required by this bound in `InsertStatement::<T, U, Op>::returning`

error[E0271]: type mismatch resolving `<table as AppearsInFromClause<table>>::Count == Once`
   --> tests/fail/selectable.rs:173:20
    |
173 |         .returning(UserWithEmbeddedPost::as_select())
    |          --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Once`, found `Never`
    |          |
    |          required by a bound introduced by this call
    |
note: required for `posts::columns::id` to implement `AppearsInQuery<users::table>`
   --> tests/fail/selectable.rs:15:9
    |
15  |         id -> Integer,
    |         ^^
    = note: 1 redundant requirement hidden
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `AppearsInQuery<users::table>`
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `SelectableExpression<users::table>`
    = note: 2 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<users::table>`
    = note: required for `InsertStatement<table, ValuesClause<ColumnInsertValue<name, Bound<Text, &str>>, table>, Insert, ...>` to implement `Query`
note: required by a bound in `InsertStatement::<T, U, Op>::returning`
   --> $DIESEL/src/query_builder/insert_statement/mod.rs
    |
    |     pub fn returning<E>(self, returns: E) -> InsertStatement<T, U, Op, ReturningClause<E>>
    |            --------- required by a bound in this associated function
    |     where
    |         InsertStatement<T, U, Op, ReturningClause<E>>: Query,
    |                                                        ^^^^^ required by this bound in `InsertStatement::<T, U, Op>::returning`

error[E0277]: Cannot select `posts::columns::id` from `users::table`
   --> tests/fail/selectable.rs:174:15
    |
174 |         .load(&mut conn)
    |          ---- ^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::id`
    |          |
    |          required by a bound introduced by this call
    |
    = note: `posts::columns::id` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::id as SelectableExpression<posts::table>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
              <posts::columns::id as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::id as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::id as SelectableExpression<Only<posts::table>>>
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `SelectableExpression<users::table>`
    = note: 2 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<users::table>`
    = note: required for `InsertStatement<table, ValuesClause<ColumnInsertValue<name, Bound<Text, &str>>, table>, Insert, ...>` to implement `Query`
    = note: required for `InsertStatement<table, ValuesClause<ColumnInsertValue<name, Bound<Text, &str>>, table>, Insert, ...>` to implement `LoadQuery<'_, _, UserWithEmbeddedPost>`
note: required by a bound in `diesel::RunQueryDsl::load`
   --> $DIESEL/src/query_dsl/mod.rs
    |
    |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
    |        ---- required by a bound in this associated function
    |     where
    |         Self: LoadQuery<'query, Conn, U>,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0277]: Cannot select `posts::columns::title` from `users::table`
   --> tests/fail/selectable.rs:174:15
    |
174 |         .load(&mut conn)
    |          ---- ^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::title`
    |          |
    |          required by a bound introduced by this call
    |
    = note: `posts::columns::title` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::title as SelectableExpression<posts::table>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
              <posts::columns::title as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::title as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::title as SelectableExpression<Only<posts::table>>>
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `SelectableExpression<users::table>`
    = note: 2 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<users::table>`
    = note: required for `InsertStatement<table, ValuesClause<ColumnInsertValue<name, Bound<Text, &str>>, table>, Insert, ...>` to implement `Query`
    = note: required for `InsertStatement<table, ValuesClause<ColumnInsertValue<name, Bound<Text, &str>>, table>, Insert, ...>` to implement `LoadQuery<'_, _, UserWithEmbeddedPost>`
note: required by a bound in `diesel::RunQueryDsl::load`
   --> $DIESEL/src/query_dsl/mod.rs
    |
    |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
    |        ---- required by a bound in this associated function
    |     where
    |         Self: LoadQuery<'query, Conn, U>,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0271]: type mismatch resolving `<table as AppearsInFromClause<table>>::Count == Once`
   --> tests/fail/selectable.rs:174:15
    |
174 |         .load(&mut conn)
    |          ---- ^^^^^^^^^ expected `Once`, found `Never`
    |          |
    |          required by a bound introduced by this call
    |
note: required for `posts::columns::id` to implement `AppearsInQuery<users::table>`
   --> tests/fail/selectable.rs:15:9
    |
15  |         id -> Integer,
    |         ^^
    = note: 1 redundant requirement hidden
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `AppearsInQuery<users::table>`
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `SelectableExpression<users::table>`
    = note: 2 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<users::table>`
    = note: required for `InsertStatement<table, ValuesClause<ColumnInsertValue<name, Bound<Text, &str>>, table>, Insert, ...>` to implement `Query`
    = note: required for `InsertStatement<table, ValuesClause<ColumnInsertValue<name, Bound<Text, &str>>, table>, Insert, ...>` to implement `LoadQuery<'_, _, UserWithEmbeddedPost>`
note: required by a bound in `diesel::RunQueryDsl::load`
   --> $DIESEL/src/query_dsl/mod.rs
    |
    |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
    |        ---- required by a bound in this associated function
    |     where
    |         Self: LoadQuery<'query, Conn, U>,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0277]: Cannot select `posts::columns::id` from `users::table`
   --> tests/fail/selectable.rs:181:20
    |
181 |         .returning(UserWithEmbeddedPost::as_select())
    |          --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::id`
    |          |
    |          required by a bound introduced by this call
    |
    = note: `posts::columns::id` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::id as SelectableExpression<posts::table>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
              <posts::columns::id as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::id as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::id as SelectableExpression<Only<posts::table>>>
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `SelectableExpression<users::table>`
    = note: 2 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<users::table>`
    = note: required for `UpdateStatement<table, NoWhereClause, Assign<ColumnWrapperForUpdate<name>, Bound<Text, &str>>, ...>` to implement `Query`
note: required by a bound in `UpdateStatement::<T, U, V>::returning`
   --> $DIESEL/src/query_builder/update_statement/mod.rs
    |
    |     pub fn returning<E>(self, returns: E) -> UpdateStatement<T, U, V, ReturningClause<E>>
    |            --------- required by a bound in this associated function
...
    |         UpdateStatement<T, U, V, ReturningClause<E>>: Query,
    |                                                       ^^^^^ required by this bound in `UpdateStatement::<T, U, V>::returning`

error[E0277]: Cannot select `posts::columns::title` from `users::table`
   --> tests/fail/selectable.rs:181:20
    |
181 |         .returning(UserWithEmbeddedPost::as_select())
    |          --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::title`
    |          |
    |          required by a bound introduced by this call
    |
    = note: `posts::columns::title` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::title as SelectableExpression<posts::table>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
              <posts::columns::title as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::title as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::title as SelectableExpression<Only<posts::table>>>
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `SelectableExpression<users::table>`
    = note: 2 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<users::table>`
    = note: required for `UpdateStatement<table, NoWhereClause, Assign<ColumnWrapperForUpdate<name>, Bound<Text, &str>>, ...>` to implement `Query`
note: required by a bound in `UpdateStatement::<T, U, V>::returning`
   --> $DIESEL/src/query_builder/update_statement/mod.rs
    |
    |     pub fn returning<E>(self, returns: E) -> UpdateStatement<T, U, V, ReturningClause<E>>
    |            --------- required by a bound in this associated function
...
    |         UpdateStatement<T, U, V, ReturningClause<E>>: Query,
    |                                                       ^^^^^ required by this bound in `UpdateStatement::<T, U, V>::returning`

error[E0271]: type mismatch resolving `<table as AppearsInFromClause<table>>::Count == Once`
   --> tests/fail/selectable.rs:181:20
    |
181 |         .returning(UserWithEmbeddedPost::as_select())
    |          --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Once`, found `Never`
    |          |
    |          required by a bound introduced by this call
    |
note: required for `posts::columns::id` to implement `AppearsInQuery<users::table>`
   --> tests/fail/selectable.rs:15:9
    |
15  |         id -> Integer,
    |         ^^
    = note: 1 redundant requirement hidden
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `AppearsInQuery<users::table>`
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `SelectableExpression<users::table>`
    = note: 2 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<users::table>`
    = note: required for `UpdateStatement<table, NoWhereClause, Assign<ColumnWrapperForUpdate<name>, Bound<Text, &str>>, ...>` to implement `Query`
note: required by a bound in `UpdateStatement::<T, U, V>::returning`
   --> $DIESEL/src/query_builder/update_statement/mod.rs
    |
    |     pub fn returning<E>(self, returns: E) -> UpdateStatement<T, U, V, ReturningClause<E>>
    |            --------- required by a bound in this associated function
...
    |         UpdateStatement<T, U, V, ReturningClause<E>>: Query,
    |                                                       ^^^^^ required by this bound in `UpdateStatement::<T, U, V>::returning`

error[E0277]: Cannot select `posts::columns::id` from `users::table`
   --> tests/fail/selectable.rs:182:15
    |
182 |         .load(&mut conn)
    |          ---- ^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::id`
    |          |
    |          required by a bound introduced by this call
    |
    = note: `posts::columns::id` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::id as SelectableExpression<posts::table>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
              <posts::columns::id as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::id as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::id as SelectableExpression<Only<posts::table>>>
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `SelectableExpression<users::table>`
    = note: 2 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<users::table>`
    = note: required for `UpdateStatement<table, NoWhereClause, Assign<ColumnWrapperForUpdate<name>, Bound<Text, &str>>, ...>` to implement `Query`
    = note: required for `UpdateStatement<table, NoWhereClause, Assign<ColumnWrapperForUpdate<name>, Bound<Text, &str>>, ...>` to implement `LoadQuery<'_, _, UserWithEmbeddedPost>`
note: required by a bound in `diesel::RunQueryDsl::load`
   --> $DIESEL/src/query_dsl/mod.rs
    |
    |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
    |        ---- required by a bound in this associated function
    |     where
    |         Self: LoadQuery<'query, Conn, U>,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0277]: Cannot select `posts::columns::title` from `users::table`
   --> tests/fail/selectable.rs:182:15
    |
182 |         .load(&mut conn)
    |          ---- ^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::title`
    |          |
    |          required by a bound introduced by this call
    |
    = note: `posts::columns::title` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::title as SelectableExpression<posts::table>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
              <posts::columns::title as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::title as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::title as SelectableExpression<Only<posts::table>>>
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `SelectableExpression<users::table>`
    = note: 2 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<users::table>`
    = note: required for `UpdateStatement<table, NoWhereClause, Assign<ColumnWrapperForUpdate<name>, Bound<Text, &str>>, ...>` to implement `Query`
    = note: required for `UpdateStatement<table, NoWhereClause, Assign<ColumnWrapperForUpdate<name>, Bound<Text, &str>>, ...>` to implement `LoadQuery<'_, _, UserWithEmbeddedPost>`
note: required by a bound in `diesel::RunQueryDsl::load`
   --> $DIESEL/src/query_dsl/mod.rs
    |
    |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
    |        ---- required by a bound in this associated function
    |     where
    |         Self: LoadQuery<'query, Conn, U>,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0271]: type mismatch resolving `<table as AppearsInFromClause<table>>::Count == Once`
   --> tests/fail/selectable.rs:182:15
    |
182 |         .load(&mut conn)
    |          ---- ^^^^^^^^^ expected `Once`, found `Never`
    |          |
    |          required by a bound introduced by this call
    |
note: required for `posts::columns::id` to implement `AppearsInQuery<users::table>`
   --> tests/fail/selectable.rs:15:9
    |
15  |         id -> Integer,
    |         ^^
    = note: 1 redundant requirement hidden
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `AppearsInQuery<users::table>`
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `SelectableExpression<users::table>`
    = note: 2 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<users::table>`
    = note: required for `UpdateStatement<table, NoWhereClause, Assign<ColumnWrapperForUpdate<name>, Bound<Text, &str>>, ...>` to implement `Query`
    = note: required for `UpdateStatement<table, NoWhereClause, Assign<ColumnWrapperForUpdate<name>, Bound<Text, &str>>, ...>` to implement `LoadQuery<'_, _, UserWithEmbeddedPost>`
note: required by a bound in `diesel::RunQueryDsl::load`
   --> $DIESEL/src/query_dsl/mod.rs
    |
    |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
    |        ---- required by a bound in this associated function
    |     where
    |         Self: LoadQuery<'query, Conn, U>,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0277]: Cannot select `posts::columns::id` from `users::table`
   --> tests/fail/selectable.rs:188:20
    |
188 |         .returning(UserWithEmbeddedPost::as_select())
    |          --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::id`
    |          |
    |          required by a bound introduced by this call
    |
    = note: `posts::columns::id` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::id as SelectableExpression<posts::table>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
              <posts::columns::id as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::id as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::id as SelectableExpression<Only<posts::table>>>
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `SelectableExpression<users::table>`
    = note: 2 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<users::table>`
note: required by a bound in `DeleteStatement::<T, U>::returning`
   --> $DIESEL/src/query_builder/delete_statement/mod.rs
    |
    |     pub fn returning<E>(self, returns: E) -> DeleteStatement<T, U, ReturningClause<E>>
    |            --------- required by a bound in this associated function
    |     where
    |         E: SelectableExpression<T>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `DeleteStatement::<T, U>::returning`

error[E0277]: Cannot select `posts::columns::title` from `users::table`
   --> tests/fail/selectable.rs:188:20
    |
188 |         .returning(UserWithEmbeddedPost::as_select())
    |          --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::title`
    |          |
    |          required by a bound introduced by this call
    |
    = note: `posts::columns::title` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::title as SelectableExpression<posts::table>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
              <posts::columns::title as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::title as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::title as SelectableExpression<Only<posts::table>>>
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `SelectableExpression<users::table>`
    = note: 2 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<users::table>`
note: required by a bound in `DeleteStatement::<T, U>::returning`
   --> $DIESEL/src/query_builder/delete_statement/mod.rs
    |
    |     pub fn returning<E>(self, returns: E) -> DeleteStatement<T, U, ReturningClause<E>>
    |            --------- required by a bound in this associated function
    |     where
    |         E: SelectableExpression<T>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `DeleteStatement::<T, U>::returning`

error[E0271]: type mismatch resolving `<table as AppearsInFromClause<table>>::Count == Once`
   --> tests/fail/selectable.rs:188:20
    |
188 |         .returning(UserWithEmbeddedPost::as_select())
    |          --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Once`, found `Never`
    |          |
    |          required by a bound introduced by this call
    |
note: required for `posts::columns::id` to implement `AppearsInQuery<users::table>`
   --> tests/fail/selectable.rs:15:9
    |
15  |         id -> Integer,
    |         ^^
    = note: 1 redundant requirement hidden
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `AppearsInQuery<users::table>`
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `SelectableExpression<users::table>`
    = note: 2 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<users::table>`
note: required by a bound in `DeleteStatement::<T, U>::returning`
   --> $DIESEL/src/query_builder/delete_statement/mod.rs
    |
    |     pub fn returning<E>(self, returns: E) -> DeleteStatement<T, U, ReturningClause<E>>
    |            --------- required by a bound in this associated function
    |     where
    |         E: SelectableExpression<T>,
    |            ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `DeleteStatement::<T, U>::returning`

error[E0277]: Cannot select `posts::columns::id` from `users::table`
   --> tests/fail/selectable.rs:189:15
    |
189 |         .load(&mut conn)
    |          ---- ^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::id`
    |          |
    |          required by a bound introduced by this call
    |
    = note: `posts::columns::id` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::id as SelectableExpression<posts::table>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::id as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
              <posts::columns::id as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::id as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::id as SelectableExpression<Only<posts::table>>>
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `SelectableExpression<users::table>`
    = note: 2 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<users::table>`
    = note: required for `DeleteStatement<table, NoWhereClause, ReturningClause<SelectBy<UserWithEmbeddedPost, _>>>` to implement `Query`
    = note: required for `DeleteStatement<table, NoWhereClause, ReturningClause<SelectBy<UserWithEmbeddedPost, _>>>` to implement `LoadQuery<'_, _, UserWithEmbeddedPost>`
note: required by a bound in `diesel::RunQueryDsl::load`
   --> $DIESEL/src/query_dsl/mod.rs
    |
    |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
    |        ---- required by a bound in this associated function
    |     where
    |         Self: LoadQuery<'query, Conn, U>,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0277]: Cannot select `posts::columns::title` from `users::table`
   --> tests/fail/selectable.rs:189:15
    |
189 |         .load(&mut conn)
    |          ---- ^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `posts::columns::title`
    |          |
    |          required by a bound introduced by this call
    |
    = note: `posts::columns::title` is no valid selection for `users::table`
    = help: the following other types implement trait `SelectableExpression<QS>`:
              <posts::columns::title as SelectableExpression<posts::table>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
              <posts::columns::title as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
              <posts::columns::title as SelectableExpression<SelectStatement<FromClause<From>>>>
              <posts::columns::title as SelectableExpression<JoinOn<Join, On>>>
              <posts::columns::title as SelectableExpression<Only<posts::table>>>
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `SelectableExpression<users::table>`
    = note: 2 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<users::table>`
    = note: required for `DeleteStatement<table, NoWhereClause, ReturningClause<SelectBy<UserWithEmbeddedPost, _>>>` to implement `Query`
    = note: required for `DeleteStatement<table, NoWhereClause, ReturningClause<SelectBy<UserWithEmbeddedPost, _>>>` to implement `LoadQuery<'_, _, UserWithEmbeddedPost>`
note: required by a bound in `diesel::RunQueryDsl::load`
   --> $DIESEL/src/query_dsl/mod.rs
    |
    |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
    |        ---- required by a bound in this associated function
    |     where
    |         Self: LoadQuery<'query, Conn, U>,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0271]: type mismatch resolving `<table as AppearsInFromClause<table>>::Count == Once`
   --> tests/fail/selectable.rs:189:15
    |
189 |         .load(&mut conn)
    |          ---- ^^^^^^^^^ expected `Once`, found `Never`
    |          |
    |          required by a bound introduced by this call
    |
note: required for `posts::columns::id` to implement `AppearsInQuery<users::table>`
   --> tests/fail/selectable.rs:15:9
    |
15  |         id -> Integer,
    |         ^^
    = note: 1 redundant requirement hidden
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `AppearsInQuery<users::table>`
    = note: required for `(posts::columns::id, posts::columns::title)` to implement `SelectableExpression<users::table>`
    = note: 2 redundant requirements hidden
    = note: required for `diesel::expression::select_by::SelectBy<UserWithEmbeddedPost, _>` to implement `SelectableExpression<users::table>`
    = note: required for `DeleteStatement<table, NoWhereClause, ReturningClause<SelectBy<UserWithEmbeddedPost, _>>>` to implement `Query`
    = note: required for `DeleteStatement<table, NoWhereClause, ReturningClause<SelectBy<UserWithEmbeddedPost, _>>>` to implement `LoadQuery<'_, _, UserWithEmbeddedPost>`
note: required by a bound in `diesel::RunQueryDsl::load`
   --> $DIESEL/src/query_dsl/mod.rs
    |
    |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
    |        ---- required by a bound in this associated function
    |     where
    |         Self: LoadQuery<'query, Conn, U>,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0599]: the function or associated item `as_select` exists for struct `UserWithoutSelectable`, but its trait bounds were not satisfied
   --> tests/fail/selectable.rs:193:56
    |
81  | struct UserWithoutSelectable {
    | ----------------------------
    | |
    | function or associated item `as_select` not found for this struct
    | doesn't satisfy `UserWithoutSelectable: diesel::Selectable<_>`
    | doesn't satisfy `UserWithoutSelectable: diesel::SelectableHelper<_>`
...
193 |     let _ = users::table.select(UserWithoutSelectable::as_select()).load(&mut conn).unwrap();
    |                                                        ^^^^^^^^^ function or associated item cannot be called on `UserWithoutSelectable` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `UserWithoutSelectable: diesel::Selectable<_>`
            which is required by `UserWithoutSelectable: diesel::SelectableHelper<_>`
            `&UserWithoutSelectable: diesel::Selectable<_>`
            which is required by `&UserWithoutSelectable: diesel::SelectableHelper<_>`
            `&mut UserWithoutSelectable: diesel::Selectable<_>`
            which is required by `&mut UserWithoutSelectable: diesel::SelectableHelper<_>`
note: the trait `diesel::Selectable` must be implemented
   --> $DIESEL/src/expression/mod.rs
    |
    | pub trait Selectable<DB: Backend> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the trait bound `diesel::expression::select_by::SelectBy<Post, _>: SingleValue` is not satisfied
   --> tests/fail/selectable.rs:196:74
    |
196 |     let _ = posts::table.select(Post::as_select()).load::<(i32, String)>(&mut conn).unwrap();
    |                                                    ----                  ^^^^^^^^^ the trait `SingleValue` is not implemented for `diesel::expression::select_by::SelectBy<Post, _>`
    |                                                    |
    |                                                    required by a bound introduced by this call
    |
    = help: the following other types implement trait `SingleValue`:
              Bool
              TinyInt
              diesel::sql_types::SmallInt
              diesel::sql_types::Integer
              BigInt
              diesel::sql_types::Float
              diesel::sql_types::Double
              diesel::sql_types::Numeric
            and $N others
    = note: required for `diesel::expression::select_by::SelectBy<Post, _>` to implement `load_dsl::private::CompatibleType<(i32, std::string::String), _>`
    = note: required for `SelectStatement<FromClause<table>, SelectClause<SelectBy<Post, _>>>` to implement `LoadQuery<'_, _, (i32, std::string::String)>`
note: required by a bound in `diesel::RunQueryDsl::load`
   --> $DIESEL/src/query_dsl/mod.rs
    |
    |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
    |        ---- required by a bound in this associated function
    |     where
    |         Self: LoadQuery<'query, Conn, U>,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0277]: the trait bound `(i32, std::string::String): diesel::Queryable<diesel::expression::select_by::SelectBy<Post, _>, _>` is not satisfied
   --> tests/fail/selectable.rs:196:74
    |
196 |     let _ = posts::table.select(Post::as_select()).load::<(i32, String)>(&mut conn).unwrap();
    |                                                    ----                  ^^^^^^^^^ the trait `diesel::Queryable<diesel::expression::select_by::SelectBy<Post, _>, _>` is not implemented for `(i32, std::string::String)`
    |                                                    |
    |                                                    required by a bound introduced by this call
    |
    = help: the following other types implement trait `diesel::Queryable<ST, DB>`:
              <(std::collections::Bound<T>, std::collections::Bound<T>) as diesel::Queryable<diesel::sql_types::Range<ST>, Pg>>
              <(T0,) as diesel::Queryable<Record<(ST0,)>, Pg>>
              <(T0,) as diesel::Queryable<(ST0,), __DB>>
              <(T0, T1) as diesel::Queryable<Record<(ST0, ST1)>, Pg>>
              <(T0, T1) as diesel::Queryable<(ST0, ST1), __DB>>
              <(T0, T1, T2) as diesel::Queryable<Record<(ST0, ST1, ST2)>, Pg>>
              <(T0, T1, T2) as diesel::Queryable<(ST0, ST1, ST2), __DB>>
              <(T0, T1, T2, T3) as diesel::Queryable<Record<(ST0, ST1, ST2, ST3)>, Pg>>
            and $N others
    = note: required for `(i32, std::string::String)` to implement `FromSqlRow<diesel::expression::select_by::SelectBy<Post, _>, _>`
    = note: required for `diesel::expression::select_by::SelectBy<Post, _>` to implement `load_dsl::private::CompatibleType<(i32, std::string::String), _>`
    = note: required for `SelectStatement<FromClause<table>, SelectClause<SelectBy<Post, _>>>` to implement `LoadQuery<'_, _, (i32, std::string::String)>`
note: required by a bound in `diesel::RunQueryDsl::load`
   --> $DIESEL/src/query_dsl/mod.rs
    |
    |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
    |        ---- required by a bound in this associated function
    |     where
    |         Self: LoadQuery<'query, Conn, U>,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0277]: the trait bound `diesel::expression::select_by::SelectBy<Post, _>: SingleValue` is not satisfied
   --> tests/fail/selectable.rs:197:87
    |
197 |     let _ = posts::table.select(Post::as_select()).into_boxed().load::<(i32, String)>(&mut conn).unwrap();
    |                                                                 ----                  ^^^^^^^^^ the trait `SingleValue` is not implemented for `diesel::expression::select_by::SelectBy<Post, _>`
    |                                                                 |
    |                                                                 required by a bound introduced by this call
    |
    = help: the following other types implement trait `SingleValue`:
              Bool
              TinyInt
              diesel::sql_types::SmallInt
              diesel::sql_types::Integer
              BigInt
              diesel::sql_types::Float
              diesel::sql_types::Double
              diesel::sql_types::Numeric
            and $N others
    = note: required for `diesel::expression::select_by::SelectBy<Post, _>` to implement `load_dsl::private::CompatibleType<(i32, std::string::String), _>`
    = note: required for `BoxedSelectStatement<'_, diesel::expression::select_by::SelectBy<Post, _>, FromClause<posts::table>, _>` to implement `LoadQuery<'_, _, (i32, std::string::String)>`
note: required by a bound in `diesel::RunQueryDsl::load`
   --> $DIESEL/src/query_dsl/mod.rs
    |
    |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
    |        ---- required by a bound in this associated function
    |     where
    |         Self: LoadQuery<'query, Conn, U>,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0277]: the trait bound `(i32, std::string::String): diesel::Queryable<diesel::expression::select_by::SelectBy<Post, _>, _>` is not satisfied
   --> tests/fail/selectable.rs:197:87
    |
197 |     let _ = posts::table.select(Post::as_select()).into_boxed().load::<(i32, String)>(&mut conn).unwrap();
    |                                                                 ----                  ^^^^^^^^^ the trait `diesel::Queryable<diesel::expression::select_by::SelectBy<Post, _>, _>` is not implemented for `(i32, std::string::String)`
    |                                                                 |
    |                                                                 required by a bound introduced by this call
    |
    = help: the following other types implement trait `diesel::Queryable<ST, DB>`:
              <(std::collections::Bound<T>, std::collections::Bound<T>) as diesel::Queryable<diesel::sql_types::Range<ST>, Pg>>
              <(T0,) as diesel::Queryable<Record<(ST0,)>, Pg>>
              <(T0,) as diesel::Queryable<(ST0,), __DB>>
              <(T0, T1) as diesel::Queryable<Record<(ST0, ST1)>, Pg>>
              <(T0, T1) as diesel::Queryable<(ST0, ST1), __DB>>
              <(T0, T1, T2) as diesel::Queryable<Record<(ST0, ST1, ST2)>, Pg>>
              <(T0, T1, T2) as diesel::Queryable<(ST0, ST1, ST2), __DB>>
              <(T0, T1, T2, T3) as diesel::Queryable<Record<(ST0, ST1, ST2, ST3)>, Pg>>
            and $N others
    = note: required for `(i32, std::string::String)` to implement `FromSqlRow<diesel::expression::select_by::SelectBy<Post, _>, _>`
    = note: required for `diesel::expression::select_by::SelectBy<Post, _>` to implement `load_dsl::private::CompatibleType<(i32, std::string::String), _>`
    = note: required for `BoxedSelectStatement<'_, diesel::expression::select_by::SelectBy<Post, _>, FromClause<posts::table>, _>` to implement `LoadQuery<'_, _, (i32, std::string::String)>`
note: required by a bound in `diesel::RunQueryDsl::load`
   --> $DIESEL/src/query_dsl/mod.rs
    |
    |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
    |        ---- required by a bound in this associated function
    |     where
    |         Self: LoadQuery<'query, Conn, U>,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0277]: the trait bound `(diesel::expression::select_by::SelectBy<Post, _>, diesel::sql_types::Text): load_dsl::private::CompatibleType<((i32, std::string::String), std::string::String), _>` is not satisfied
   --> tests/fail/selectable.rs:198:100
    |
198 |     let _ = posts::table.select((Post::as_select(), posts::title)).load::<((i32, String), String)>(&mut conn).unwrap();
    |                                                                    ----                            ^^^^^^^^^ the trait `load_dsl::private::CompatibleType<((i32, std::string::String), std::string::String), _>` is not implemented for `(diesel::expression::select_by::SelectBy<Post, _>, diesel::sql_types::Text)`
    |                                                                    |
    |                                                                    required by a bound introduced by this call
    |
    = note: This is a mismatch between what your query returns and what your type expects the query to return
            Consider using `#[derive(Selectable)]` + `#[diesel(check_for_backend(_))]` on your struct `((i32, std::string::String), std::string::String)` and
            in your query `.select(((i32, std::string::String), std::string::String)::as_select())` to get a better error message
    = help: the following other types implement trait `load_dsl::private::CompatibleType<U, DB>`:
              (ST0,)
              (ST0, ST1)
              (ST0, ST1, ST2)
              (ST0, ST1, ST2, ST3)
              (ST0, ST1, ST2, ST3, ST4)
              (ST0, ST1, ST2, ST3, ST4, ST5)
              (ST0, ST1, ST2, ST3, ST4, ST5, ST6)
              (ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7)
            and $N others
    = note: required for `SelectStatement<FromClause<table>, SelectClause<(SelectBy<Post, _>, title)>>` to implement `LoadQuery<'_, _, ((i32, std::string::String), std::string::String)>`
note: required by a bound in `diesel::RunQueryDsl::load`
   --> $DIESEL/src/query_dsl/mod.rs
    |
    |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
    |        ---- required by a bound in this associated function
    |     where
    |         Self: LoadQuery<'query, Conn, U>,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0277]: the trait bound `diesel::expression::select_by::SelectBy<Post, _>: SingleValue` is not satisfied
   --> tests/fail/selectable.rs:202:37
    |
202 |         .load::<(i32, String, i32)>(&mut conn)
    |          ----                       ^^^^^^^^^ the trait `SingleValue` is not implemented for `diesel::expression::select_by::SelectBy<Post, _>`
    |          |
    |          required by a bound introduced by this call
    |
    = help: the following other types implement trait `SingleValue`:
              Bool
              TinyInt
              diesel::sql_types::SmallInt
              diesel::sql_types::Integer
              BigInt
              diesel::sql_types::Float
              diesel::sql_types::Double
              diesel::sql_types::Numeric
            and $N others
    = note: required for `diesel::expression::select_by::SelectBy<Post, _>` to implement `load_dsl::private::CompatibleType<(i32, std::string::String, i32), _>`
    = note: required for `InsertStatement<table, ValuesClause<ColumnInsertValue<title, Bound<Text, &str>>, table>, Insert, ...>` to implement `LoadQuery<'_, _, (i32, std::string::String, i32)>`
note: required by a bound in `diesel::RunQueryDsl::load`
   --> $DIESEL/src/query_dsl/mod.rs
    |
    |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
    |        ---- required by a bound in this associated function
    |     where
    |         Self: LoadQuery<'query, Conn, U>,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0277]: the trait bound `(i32, std::string::String, i32): diesel::Queryable<diesel::expression::select_by::SelectBy<Post, _>, _>` is not satisfied
   --> tests/fail/selectable.rs:202:37
    |
202 |         .load::<(i32, String, i32)>(&mut conn)
    |          ----                       ^^^^^^^^^ the trait `diesel::Queryable<diesel::expression::select_by::SelectBy<Post, _>, _>` is not implemented for `(i32, std::string::String, i32)`
    |          |
    |          required by a bound introduced by this call
    |
    = help: the following other types implement trait `diesel::Queryable<ST, DB>`:
              <(std::collections::Bound<T>, std::collections::Bound<T>) as diesel::Queryable<diesel::sql_types::Range<ST>, Pg>>
              <(T0,) as diesel::Queryable<Record<(ST0,)>, Pg>>
              <(T0,) as diesel::Queryable<(ST0,), __DB>>
              <(T0, T1) as diesel::Queryable<Record<(ST0, ST1)>, Pg>>
              <(T0, T1) as diesel::Queryable<(ST0, ST1), __DB>>
              <(T0, T1, T2) as diesel::Queryable<Record<(ST0, ST1, ST2)>, Pg>>
              <(T0, T1, T2) as diesel::Queryable<(ST0, ST1, ST2), __DB>>
              <(T0, T1, T2, T3) as diesel::Queryable<Record<(ST0, ST1, ST2, ST3)>, Pg>>
            and $N others
    = note: required for `(i32, std::string::String, i32)` to implement `FromSqlRow<diesel::expression::select_by::SelectBy<Post, _>, _>`
    = note: required for `diesel::expression::select_by::SelectBy<Post, _>` to implement `load_dsl::private::CompatibleType<(i32, std::string::String, i32), _>`
    = note: required for `InsertStatement<table, ValuesClause<ColumnInsertValue<title, Bound<Text, &str>>, table>, Insert, ...>` to implement `LoadQuery<'_, _, (i32, std::string::String, i32)>`
note: required by a bound in `diesel::RunQueryDsl::load`
   --> $DIESEL/src/query_dsl/mod.rs
    |
    |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
    |        ---- required by a bound in this associated function
    |     where
    |         Self: LoadQuery<'query, Conn, U>,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0271]: type mismatch resolving `<SqliteConnection as Connection>::Backend == Pg`
   --> tests/fail/selectable.rs:211:15
    |
211 |         .load(&mut conn)
    |          ---- ^^^^^^^^^ expected `Pg`, found `Sqlite`
    |          |
    |          required by a bound introduced by this call
    |
    = note: required for `SelectStatement<FromClause<JoinOn<Join<table, table, Inner>, Grouped<...>>>, ..., ..., ..., ..., ..., ...>` to implement `LoadQuery<'_, diesel::SqliteConnection, UserWithPostCount>`
note: required by a bound in `diesel::RunQueryDsl::load`
   --> $DIESEL/src/query_dsl/mod.rs
    |
    |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
    |        ---- required by a bound in this associated function
    |     where
    |         Self: LoadQuery<'query, Conn, U>,
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`
